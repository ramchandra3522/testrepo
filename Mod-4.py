# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dPLGcTWQL1FXoOoJrK0m1VOI4eLkLm2Z
"""

!wget https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/LargeData/m4_survey_data.sqlite

import sqlite3

conn=sqlite3.connect("m4_survey_data.sqlite")
import pandas as pd

table_query = "SELECT name FROM sqlite_master WHERE type='table';"
tables = pd.read_sql_query(table_query, conn)
tables

QUERY = """
SELECT COUNT(*)
FROM master
"""

# the read_sql_query runs the sql query and returns the data as a dataframe
df = pd.read_sql_query(QUERY,conn)
df.head()

QUERY = """
SELECT name as Table_Name FROM
sqlite_master WHERE
type = 'table'
"""
# the read_sql_query runs the sql query and returns the data as a dataframe
pd.read_sql_query(QUERY,conn)

QUERY = """
SELECT Age,COUNT(*) as count
FROM master
group by age
order by age
"""
pd.read_sql_query(QUERY,conn)

table_name = 'master'  # the table you wish to describe

QUERY = """
SELECT sql FROM sqlite_master
WHERE name= '{}'
""".format(table_name)

df = pd.read_sql_query(QUERY,conn)
print(df.iat[0,0])

import sqlite3
import pandas as pd

# Step 1: Connect to SQLite database
conn = sqlite3.connect('m4_survey_data.sqlite')

# Step 2: Query to show the first few rows (to check column names)
query = "SELECT * FROM master LIMIT 5;"  # Replace 'survey' with your actual table name if it's different
df = pd.read_sql_query(query, conn)

# Step 3: Display column names
print(df.columns)

# Close the connection
conn.close()

import matplotlib.pyplot as plt
plt.figure(figsize=(10, 6))
plt.hist(df['ConvertedComp'].dropna(), bins=30, edgecolor='green')
plt.title('Histogram of Converted Compensation')
plt.xlabel('Converted Compensation (in USD)')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(8, 6))
plt.boxplot(df['Age'].dropna())
plt.title('Box Plot of Age')
plt.ylabel('Age')
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(df['Age'], df['WorkWeekHrs'], alpha=0.5)
plt.title('Scatter Plot of Age vs WorkWeekHrs')
plt.xlabel('Age')
plt.ylabel('WorkWeekHrs')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
bubble_size = df['Age'] / df['Age'].max() * 100  # Normalize the Age for bubble size

plt.scatter(df['WorkWeekHrs'], df['CodeRevHrs'], s=bubble_size, alpha=0.5, c='blue', edgecolor='w')
plt.title('Bubble Plot of WorkWeekHrs vs CodeRevHrs with Age as Bubble Size')
plt.xlabel('WorkWeekHrs')
plt.ylabel('CodeRevHrs')
plt.grid(True)
plt.show()

df['Respondent'] = df['Respondent'].astype(str)  # Ensure all values are strings
df_cleaned = df['Respondent'].dropna().str.split(';', expand=True).stack()  # Split and stack

# Count the occurrences and get the top 5
top_5_databases = df_cleaned.value_counts().nlargest(5)

# Step 4: Create a pie chart
plt.figure(figsize=(8, 8))
plt.pie(top_5_databases, labels=top_5_databases.index, autopct='%1.1f%%', startangle=140, colors=plt.cm.Paired.colors)
plt.title('Top 5 Databases Respondents Wish to Learn Next Year')
plt.axis('equal')  # Equal aspect ratio ensures that the pie chart is circular.
plt.show()

df_filtered = df[(df['Age'] >= 30) & (df['Age'] <= 35)]

# Step 4: Calculate medians
median_work_week_hrs = df_filtered['WorkWeekHrs'].median()
median_code_rev_hrs = df_filtered['CodeRevHrs'].median()

# Step 5: Create a stacked bar chart
labels = ['WorkWeekHrs', 'CodeRevHrs']
medians = [median_work_week_hrs, median_code_rev_hrs]

plt.figure(figsize=(8, 6))
plt.bar(labels, medians, color=['skyblue', 'lightgreen'])
plt.title('Median WorkWeekHrs and CodeRevHrs for Age Group 30 to 35')
plt.ylabel('Hours')
plt.show()

df_filtered = df[(df['Age'] >= 45) & (df['Age'] <= 60)]

# Step 4: Calculate the median of ConvertedComp
median_converted_comp = df_filtered['ConvertedComp'].median()

# Step 5: Create a bar chart for the median ConvertedComp
plt.figure(figsize=(8, 6))
plt.bar(['Age 45-60'], [median_converted_comp], color='skyblue')
plt.title('Median Converted Compensation for Age Group 45 to 60')
plt.ylabel('Median Converted Compensation (in USD)')
plt.show()

mainbranch_counts = df['MainBranch'].dropna().value_counts()

# Step 4: Create a horizontal bar chart
plt.figure(figsize=(10, 6))
plt.barh(mainbranch_counts.index, mainbranch_counts.values, color='skyblue')
plt.title('Distribution of MainBranch')
plt.xlabel('Number of Respondents')
plt.ylabel('MainBranch')
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.show()

conn.close()