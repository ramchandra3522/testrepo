# -*- coding: utf-8 -*-
"""mod_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LlDiD2YsNX3P41dtYTwDEeir0HYhXrhq
"""

import requests
def download(url,filename):
    response=requests.get(url)
    if response.status_code==200:
        with open(filename, "wb") as f:
            f.write(response.content)
        print(f"Downloaded successfully: {filename}")
    else:
        print(f"Failed to download. Status code: {response.status_code}")
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/LargeData/m2_survey_data.csv"
filename="m2_survey_data.csv"
download(url, filename)

import pandas as pd     #using pandas method to read CSV
df=pd.read_csv(filename)

print(df.head(5))
print(df["ConvertedComp"].head(5))

#Plot the distribution curve for the column ConvertedComp.

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(4, 2))
sns.kdeplot(df['ConvertedComp'], shade=True)
plt.title('Distribution of ConvertedComp')
plt.xlabel('ConvertedComp')
plt.ylabel('Density')
plt.show()

#Plot the histogram for the column ConvertedComp.
plt.figure(figsize=(4,2))
sns.histplot(df['ConvertedComp'],bins=15,color="Red",edgecolor="blue")
plt.title('Histogram of ConvertedComp')
plt.xlabel('ConvertedComp')
plt.ylabel('Frequency')
plt.show()

#What is the median of the column ConvertedComp?
print(f"the median is :",df["ConvertedComp"].median())

#How many responders identified themselves only as a Man?
man_count = df[df['Gender'] == 'Man'].shape[0]

print(f"The number of respondents who identified themselves only as a Man is: {man_count}")

woman_count = df[df['Gender'] == 'Woman'].shape[0]
print(f"The number of respondents who identified themselves only as a woman is: {woman_count}")

# Five-number summary for the column 'Age'
min_age = df['Age'].min()
q1_age = df['Age'].quantile(0.25)
median_age = df['Age'].median()
q3_age = df['Age'].quantile(0.75)
max_age = df['Age'].max()

print(f" summary for Age:")
print(f"Minimum: ",min_age)
print(f"Q1 (25th percentile): ",q1_age)
print(f"Median (50th percentile): ",median_age)
print(f"Q3 (75th percentile): ",q3_age)
print(f"Maximum: ",max_age)

plt.figure(figsize=(6,4))
sns.histplot(df['Age'],bins=15,color="green",edgecolor="black")
plt.title('Histogram of Age')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

#Find out if outliers exist in the column ConvertedComp using a box plot?
# Creating a box plot for ConvertedComp to identify outliers
plt.figure(figsize=(10, 6))
plt.boxplot(df['ConvertedComp'].dropna(), vert=False, patch_artist=True, boxprops=dict(facecolor='green'))
plt.title('Box Plot of ConvertedComp')
plt.ylabel('ConvertedComp')
plt.show()

#Find out the Inter Quartile Range for the column ConvertedComp.
# Calculate the IQR for ConvertedComp
q1 = df['ConvertedComp'].quantile(0.25)
q3 = df['ConvertedComp'].quantile(0.75)
iqr = q3 - q1

print(f"IQR of ConvertedComp: {iqr}")

#Identify how many outliers are there in the ConvertedComp column.
# Calculate Q1 (25th percentile) and Q3 (75th percentile)
q1 = df['ConvertedComp'].quantile(0.25)
q3 = df['ConvertedComp'].quantile(0.75)

# Calculate the Interquartile Range (IQR)
iqr = q3 - q1

# Define the lower and upper bounds for outliers
lower_bound = q1 - 1.5 * iqr
upper_bound = q3 + 1.5 * iqr

# Count the number of outliers
outliers = df[(df['ConvertedComp'] < lower_bound) | (df['ConvertedComp'] > upper_bound)]
num_outliers = outliers.shape[0]

print(f"Number of outliers in the ConvertedComp column: {num_outliers}")

# Calculate Q1 (25th percentile) and Q3 (75th percentile)
q1 = df['ConvertedComp'].quantile(0.25)
q3 = df['ConvertedComp'].quantile(0.75)

# Calculate the Interquartile Range (IQR)
iqr = q3 - q1

# Define the lower and upper bounds for outliers
lower_bound = q1 - 1.5 * iqr
upper_bound = q3 + 1.5 * iqr

# Create a new DataFrame by removing the outliers
df_no_outliers = df[(df['ConvertedComp'] >= lower_bound) & (df['ConvertedComp'] <= upper_bound)]

print(f"New DataFrame shape after removing outliers: {df_no_outliers.shape}")